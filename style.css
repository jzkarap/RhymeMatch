html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: 'Josefin Sans', sans-serif;
}

body {
    background-color: rgba(0,0,0,.2);
}

.container {
    width: 93vw;
    height: 75vh;
    position: relative;
    background-color: rgba(0,0,0,.2);
    border-radius: 10px;
    padding: 20px;
    margin: 20px;
    box-shadow: 0 5px 15px rgba(0,0,0,.2);
    -ms-touch-action: none;
    touch-action: none;
  }

p {
    display: inline-block;
    width: auto;
    text-align: center;
    background-color: pink;
    opacity: .8;
    padding: 1%;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0,0,0,.2);
    transition: background-color .4s;
}

.dropzone {
    font-size: 12vh;
    display: inline-block;
    padding: 2% 3%;
    width: auto;
    opacity: 1;
    margin: 0 40% 0 0%;
    background-color: blue;
    color: orange;
    line-height: 12vh;
    text-shadow: 0 5px 15px rgba(0,0,0,.2);
}

.choices {
    height: 100vh;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

button {
    margin: 0 5%;
    padding: 1%;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0,0,0,.2);
    outline: none;
    font-family: 'Josefin Sans', sans-serif;
    font-weight: 700;
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    /* Display element as its own block instead of simply inline */
    display: inline-block;
    /* Since this is inline-block, it is treated as if it were text...
        ... we can add text-align to its parent to center it, 
        without having to worry about any positioning shenanigans */
    /* Transition should be on initial state */
    /* We give a transition for all animations, and give a duration of .2s */
    transition: all .2s;
    position: relative;
}

button:hover {
    /* In CSS, Y-axis moves from top to bottom,
        so to move up we pass through negative values */
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}

button:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 15px rgba(0,0,0,.2);
}

/* To use ::after pseudo-element, its content must be specified */
/* Its display property must also be specified (and should match whatever element it is being placed after,
so that they appear similar */
button::after {
    content: "";
    display: inline-block;
    /* A pseudo-element is essentially treated as a child of the element it is bound to;
        so if it is meant to appear the same as its parent, it should occupy the same height and width */
    height: 100%;
    width: 100%;
    border-radius: 10px;
    /* To use absolute position on pseudo-element,
        set its parent element to relative */
    position: absolute;
    top: 0;
    left: 0;
    transition: all .4s;
    z-index: -1;
}

button::after {
    background-color: #fff;
    color: #777;
}

/* Set after pseudo-element only when button is hovered */
button:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

h1 {
    margin: 1.5% 5% 1% 5%;
    text-shadow: 2px 6px 15px rgba(0,0,0,.2);
}

.bingo {
    background-color: green;
}

.winner {
    background-color: red;
    animation: winState 15s infinite linear;
    transition: 3s;
}

@keyframes winState {
    0%  {background-color: blue;}
    5%  {background-color: indigo};
    10% {background-color: yellow;}
    15% {background-color: orangered};
    20% {background-color: purple;}
    25% {background-color: royalblue};
    30% {background-color: brown;}
    35% {background-color: coral};
    40% {background-color: orange;}
    45% {background-color: darkcyan};
    50% {background-color: indianred;}
    60% {background-color: slateblue;}
    70% {background-color: slategray;}
    80% {background-color: crimson;}
    90% {background-color: rosybrown;}
    100% {background-color:blueviolet;}
}

.congrats {
    float: right;
}

.nope {
    background-color: red;
}